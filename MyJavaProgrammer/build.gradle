apply plugin: 'java'
println "---------------project name = $project.name ------begin----------------------------"
//查看gradle properties
//defaultTasks 'hello','distribution'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

//使用外部依赖之前，至少需要定义一个库
repositories {
    mavenCentral()
    //使用远程的Maven库
//    maven {
//        url "http://repo.mycompany.com/maven2"
//    }
    //使用本地的ivy目录, ..表示当前目录
//    ivy {
//        url "../local-repo"
//    }
}

task hello {
    ext.helloProp = "helloValue"
    doLast {
        println "Hello Word!"
    }
}

task upper << {
    String someString = "HHHH_kkk"
    println "Original: " + someString
    println "Upper case : " + someString.toUpperCase()

}

task count << {
    4.times {
//        println "time = $time"
        println "time = $it"
    }
}

task intro(dependsOn: hello) << {
    println "i am gradle"
}

//依赖的任务没必要提前定义
task taskx(dependsOn: 'taskY') << {
    println "taskx"
}

task taskY << {
    println "taskY"
}

//动态的创建任务
4.times { counter ->
    task "task$counter" << {
        println "I am task number $counter"
    }
}

//添加依赖
task0.dependsOn task2, task3

hello.doFirst {
    println "hello doFirst"
}

hello.doFirst {
    println "hello doFirst ext"
}

hello.doLast {
    println "hello doLast"
}

//短标记法 $可以访问一个存在的任务
hello << {
    println "hello doLast ext ,name = $hello.name"
}

//自定义任务属性
task myTask {
    ext.myProperty = "myValue"

    //注意 上面没 << ， doLast 可以加到该处
}

task printTaskProperties << {
    println "printTaskProperties =" + myTask.myProperty
}

task printHelloProperties << {
    println "printTaskProperties =" + hello.helloProp
}

task loadFile << {
    def files = file('../src').listFiles()

    files.each { File file ->
        println "loadFile files= " + file.name
    }
}

task distribution << {
    println "we build the zip with version = $version"
}

task release(dependsOn: distribution) << {
    println "we release now"
}

//默认属性
gradle.taskGraph.whenReady {
    taskGraph ->
        if (taskGraph.hasTask(release)) {
            version = '1.0'
        } else {
            version = '1.0-snapshot'
        }
}

//TINKER_VERSION = '1.7.4'//改变属性
jar {
    manifest {
        attributes 'Implementation-Title': 'gradle------quick start'
    }
}

//发布jar文件  这里发布到本地
uploadArchives {
    repositories {
        flatDir {
            dirs 'repos'
        }
    }
}

//通过tasks创建任务
tasks.create(name: 'myCopy1',type: Copy, group:"yangyang", description : "描述") {
    description "复制任务描述信息 整个目录"
    group rootProject.GROUP

    println "-----------project name = $project.name ,myCopy myCopy myCopy"
    println "-----------project name = $project.name ,myCopy---libsFile"
    File libsFile = file("${buildDir}/libs");
    println "-----------project name = $project.name ,libsFile.exists=" + libsFile.exists()
    from libsFile
    into file('newLibsDir22')
}

task cleanFinish(dependsOn: clean)

cleanFinish << {
    File libFile = file('$buildDir/libs');
    println "-----------project name = $project.name ,buildDir= $buildDir libFile.exists=" + libFile.exists()
}
//myCopy.dependsOn ":MyJavaProgrammer:generateDebugAndroidTestSources" // path

task myCopyEx(type: Copy,description: '复制任务描述信息 个别文件') {
    group rootProject.ext.GROUP

    from file("srctest")
    into file('srcDst')
    include ('*.txt')//
}

//依赖其他项目的task
task dependOnOther(dependsOn: ':mylib:myLibTask1') << {
    println "-----------myCopyEx.name----Copy end----"
}

//跳过任务 方式一：onlyIf
task onlyIfTest << {
    println "----------onlyIfTest----"

}

onlyIfTest.onlyIf{
//    tasks.findAll { }
    println "----------onlyIfTest.onlyIf----rootProject.hasProperty(yangjiajia)=" + rootProject.hasProperty("yangjiajia")
    rootProject.hasProperty("onlyIfPredicate")
}

//跳过任务 方式二：onlyIf
task stopExe << {
    println "----------StopExe--------"
}

stopExe.doFirst {
    if (true) {
        throw new StopExecutionException()
    }
}

task StopExe2(dependsOn: stopExe) << {
    println "----------StopExe--no affect------"
}

//跳过任务 方式三：
//激活和注销任务
task disableMe <<{
    println "----------diseableMe----"
}

disableMe.enabled false



tasks.myCopyEx.name

//myCopy.dependsOn 'generateDebugAndroidTestSources' // path

//println "project name = $project.name ,projectDir= $project.projectDir"
println "-----------project name = $project.name ,hasProperty--yangjiajia=" + hasProperty("yangjiajia") ? getProperty("yangjiajia") : "";

println "-----------project name = $project.name ,buildDir= $buildDir buildDir=$buildDir"
File dst = file("srctest");
println "-----------project name = $project.name ,buildDir= $buildDir dst.exists=" + dst.exists()











