buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }


    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.0'
        classpath "com.tencent.tinker:tinker-patch-gradle-plugin:${TINKER_VERSION}"
    }
}

allprojects {
    repositories {
        mavenLocal()
        jcenter()
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.tencent.tinker.patch'
apply from: file('utils.gradle')
apply plugin: 'com.antfortune.freeline'

//apply plugin: 'com.android.databinding'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

//    freeline {
//        hack true
//    }
    freeline {
        applicationProxy false
    }

    dataBinding {
        enabled = true
    }

    //recommend
    dexOptions {
        jumboMode = true
    }

    signingConfigs {
        yang {
            keyAlias 'yangjiajia'
            keyPassword 'yangjiajia'
            storeFile file('yangjiajia.keystore')
            storePassword 'yangjiajia'
        }
    }

    sourceSets{
//        main {
//            java.srcDirs = ['src/main/java'];
//        }

        fee{
            java.srcDirs = ['src/fee/java'];
        }

        free{
        }
    }

    productFlavors {
        fee{

        }

        free{

        }
    }

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        buildConfigField "String", "Message", "\"测试buildConfigField的使用\""
        // Enabling multidex support.
//        multiDexEnabled true

        /**
         * you can use multiDex and install it in your ApplicationLifeCycle implement
         */
        multiDexEnabled true
        /**
         * not like proguard, multiDexKeepProguard is not a list, so we can't just
         * add for you in our task. you can copy tinker keep rules at
         * build/intermediates/tinker_intermediates/tinker_multidexkeep.pro
         */
        multiDexKeepProguard file("keep_in_main_dex.txt")
        /**
         * buildConfig can change during patch!
         * we can use the newly value when patch
         */
        buildConfigField "String", "MESSAGE", "\"I am the base apk\""
//        buildConfigField "String", "MESSAGE", "\"I am the patch apk\""
        /**
         * client version would update with patch
         * so we can get the newly git version easily!
         */
        buildConfigField "String", "CLIENTVERSION", "\"${getTinkerIdValue()}\""
        buildConfigField "String", "PLATFORM", "\"all\""
    }

    buildTypes {
        release {

            minifyEnabled true
            proguardFile 'proguard.flags'
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.yang
            buildConfigField "String", "HHH", "\"releasereleasereleaserelease\""
        }

        debug {
            debuggable true
            minifyEnabled false
//            signingConfig signingConfigs.debug
        }
    }

    lintOptions {
        check 'NewApi'
    }

}

dependencies {
    compile fileTree(include: '*.jar', exclude: 'BDAutoUpdateSDK_20150605_V1.2.0.jar', dir: 'libs')

    compile project(':zoomlibrary')

    compile "com.android.support:appcompat-v7:${rootProject.ext.supportVersion}"
    compile "com.android.support:design:${rootProject.ext.supportVersion}"
    compile "com.android.support:support-v13:${rootProject.ext.supportVersion}"
    compile "com.android.support:recyclerview-v7:${rootProject.ext.supportVersion}"
    compile "com.android.support:multidex:${rootProject.ext.multidexVersion}"

    compile("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
    provided("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }

    compile "io.reactivex.rxjava2:rxandroid:${rootProject.ext.rxandroidVersion}"
    //Because RxAndroid releases are few and far between, it is recommended you also
    //explicitly depend on RxJava's latest version for bug fixes and new features.
    compile "io.reactivex.rxjava2:rxjava:${rootProject.ext.rxjavaVersion}"

    compile "com.squareup.okhttp3:okhttp:${rootProject.ext.okhttp3Version}"

    compile "com.squareup.okhttp3:logging-interceptor:${rootProject.ext.okhttp3InterceptorVersion}"

    compile "com.squareup.retrofit2:retrofit:${rootProject.ext.retrofitVersion}"

    compile "com.squareup.retrofit2:adapter-rxjava:${rootProject.ext.retrofit2AdapterRxjavaVersion}"

    compile "com.nineoldandroids:library:${rootProject.ext.nineoldandroidsVersion}"

    compile "com.jakewharton:butterknife:${rootProject.ext.butterknifeVersion}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${rootProject.ext.butterknifeVersion}"

    compile ("com.alibaba.android:vlayout:${rootProject.ext.vlayoutVersion}@aar") {
        transitive = true
    }

}

// Iterable gets an each() method
//configurations.compile.each {File f ->
//    println "configurations.compile f =" + f.name
//}
//
//configurations.runtime.each { File f ->
//    println "configurations.runtime f =" + f.name
//}

def gitSha() {
    try {
        String gitRev = 'git rev-parse --short HEAD'.execute(null, project.rootDir).text.trim()
        if (gitRev == null) {
            throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
        }
        return gitRev
    } catch (Exception e) {
        throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
    }
}


def bakPath = file("${buildDir}/bakApk/")

/**
 * you can use assembleRelease to build you base apk
 * use tinkerPatchRelease -POLD_APK=  -PAPPLY_MAPPING=  -PAPPLY_RESOURCE= to build patch
 * add apk from the build/bakApk
 */
ext {
    //for some reason, you may want to ignore tinkerBuild, such as instant run debug build?
    tinkerEnabled = true //2016年11月5日22:20:27 练习task,暂时注掉

    //for normal build
    //old apk file to build patch apk
    tinkerOldApkPath = "${bakPath}/app-debug-0302-17-39-23.apk"
    //proguard mapping file to build patch apk
    tinkerApplyMappingPath = "${bakPath}/TestAndroid-release-1105-16-53-08-mapping.txt"
    //resource R.txt to build patch apk, must input if there is resource changed
    tinkerApplyResourcePath = "${bakPath}/app-debug-0302-17-39-23-R.txt"

    //only use for build all flavor, if not, just ignore this field
    tinkerBuildFlavorDirectory = "${bakPath}/app-1105-16-53-08"
}


def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

println "${project.name} hasProperty TINKER_ID=" + hasProperty("TINKER_ID")
println "${project.name} hasProperty yangjiajia=" + hasProperty("yangjiajia")
println "${project.name} hasProperty org.gradle.java.home=" + hasProperty("org.gradle.java.home")
println "${project.name} hasProperty buildDir=" + buildDir.getAbsolutePath()
println "${project.name} hasProperty SIGNING_FILE_PATH=" + hasProperty("SIGNING_FILE_PATH")
//println "${project.name} hasProperty gradleUserHomeDir=" + gradle.gradleUserHomeDir

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
}

//2016-11-5 22:26:32 为了test task gradle.properties 中置为false
def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? TINKER_ENABLE : ext.tinkerEnabled
}

def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory
}


println "${project.name} hasProperty buildWithTinker=" + buildWithTinker()
if (buildWithTinker()) {
    apply plugin: 'com.tencent.tinker.patch'

    tinkerPatch {
        /**
         * necessary，default 'null'
         * the old apk path, use to diff with the new apk to build
         * add apk from the build/bakApk
         */
        oldApk = getOldApkPath()
        /**
         * optional，default 'false'
         * there are some cases we may get some warnings
         * if ignoreWarning is true, we would just assert the patch process
         * case 1: minSdkVersion is below 14, but you are using dexMode with raw.
         *         it must be crash when load.
         * case 2: newly added Android Component in AndroidManifest.xml,
         *         it must be crash when load.
         * case 3: loader classes in dex.loader{} are not keep in the main dex,
         *         it must be let tinker not work.
         * case 4: loader classes in dex.loader{} changes,
         *         loader classes is ues to load patch dex. it is useless to change them.
         *         it won't crash, but these changes can't effect. you may ignore it
         * case 5: resources.arsc has changed, but we don't use applyResourceMapping to build
         */
        ignoreWarning = false

        /**
         * optional，default 'true'
         * whether sign the patch file
         * if not, you must do yourself. otherwise it can't check success during the patch loading
         * we will use the sign config with your build type
         */
        useSign = true

        /**
         * Warning, applyMapping will affect the normal android build!
         */
        buildConfig {
//            /**
//             * optional，default 'null'
//             * if we use tinkerPatch to build the patch apk, you'd better to apply the old
//             * apk mapping file if minifyEnabled is enable!
//             * Warning:
//             * you must be careful that it will affect the normal assemble build!
//             */
            applyMapping = getApplyMappingPath()
//            /**
//             * optional，default 'null'
//             * It is nice to keep the resource id from R.txt file to reduce java changes
//             */
            applyResourceMapping = getApplyResourceMappingPath()
//
//            /**
//             * necessary，default 'null'
//             * because we don't want to check the base apk with md5 in the runtime(it is slow)
//             * tinkerId is use to identify the unique base apk when the patch is tried to apply.
//             * we can use git rev, svn rev or simply versionCode.
//             * we will gen the tinkerId in your manifest automatic
//             */
            tinkerId = getTinkerIdValue()
        }

        dex {
            /**
             * optional，default 'jar'
             * only can be 'raw' or 'jar'. for raw, we would keep its original format
             * for jar, we would repack dexes with zip format.
             * if you want to support below 14, you must use jar
             * or you want to save rom or check quicker, you can use raw mode also
             */
            dexMode = "jar"
            /**
             * optional，default 'false'
             * if usePreGeneratedPatchDex is true, tinker framework will generate auxiliary class
             * and insert auxiliary instruction when compiling base package using
             * assemble{Debug/Release} task to prevent class pre-verified issue in dvm.
             * Besides, a real dex file contains necessary class will be generated and packed into
             * patch package instead of any patch info files.
             *
             * Use this mode if you have to use any dex encryption solutions.
             *
             * Notice: If you change this value, please trigger clean task
             * and regenerate base package.
             */
//            usePreGeneratedPatchDex = false
            /**
             * necessary，default '[]'
             * what dexes in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             */
            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]
            /**
             * necessary，default '[]'
             * Warning, it is very very important, loader classes can't change with patch.
             * thus, they will be removed from patch dexes.
             * you must put the following class into main dex.
             * Simply, you should add your own application {@code tinker.sample.android.SampleApplication}
             * own tinkerLoader, and the classes you use in them
             *
             */
//            loader = ["com.tencent.tinker.loader.*",
//                      //warning, you must change it with your application
//                      "com.testandroid.yang.tinker.SampleApplication",
//                      //use sample, let BaseBuildInfo unchangeable with tinker
//                      "com.testandroid.yang.tinker.BaseBuildInfo"
//            ]

            loader = [
                    //use sample, let BaseBuildInfo unchangeable with tinker
                    "com.testandroid.yang.tinker.BaseBuildInfo"
            ]
        }

        lib {
            /**
             * optional，default '[]'
             * what library in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             * for library in assets, we would just recover them in the patch directory
             * you can get them in TinkerLoadResult with Tinker
             */
            pattern = ["lib/armeabi/*.so"]
        }

        res {
            /**
             * optional，default '[]'
             * what resource in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             * you must include all your resources in apk here,
             * otherwise, they won't repack in the new apk resources.
             */
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]

            /**
             * optional，default '[]'
             * the resource file exclude patterns, ignore add, delete or modify resource change
             * it support * or ? pattern.
             * Warning, we can only use for files no relative with resources.arsc
             */
            ignoreChange = ["assets/sample_meta.txt"]

            /**
             * default 100kb
             * for modify resource, if it is larger than 'largeModSize'
             * we would like to use bsdiff algorithm to reduce patch file size
             */
            largeModSize = 100
        }

        packageConfig {
            /**
             * optional，default 'TINKER_ID, TINKER_ID_VALUE' 'NEW_TINKER_ID, NEW_TINKER_ID_VALUE'
             * package meta file gen. path is assets/package_meta.txt in patch file
             * you can use securityCheck.getPackageProperties() in your ownPackageCheck method
             * or TinkerLoadResult.getPackageConfigByName
             * we will get the TINKER_ID from the old apk manifest for you automatic,
             * other config files (such as patchMessage below)is not necessary
             */
            configField("patchMessage", "tinker is sample to use")
            /**
             * just a sample case, you can use such as sdkVersion, brand, channel...
             * you can parse it in the SamplePatchListener.
             * Then you can use patch conditional!
             */
            configField("platform", "all")
            /**
             * patch version via packageConfig
             */
            configField("patchVersion", "1.0")
        }
        //or you can add config filed outside, or get meta value from old apk
        //project.tinkerPatch.packageConfig.configField("test1", project.tinkerPatch.packageConfig.getMetaDataFromOldApk("Test"))
        //project.tinkerPatch.packageConfig.configField("test2", "sample")

        /**
         * if you don't use zipArtifact or path, we just use 7za to try
         */
        sevenZip {
            /**
             * optional，default '7za'
             * the 7zip artifact path, it will use the right 7za with your platform
             */
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
            /**
             * optional，default '7za'
             * you can specify the 7za path yourself, it will overwrite the zipArtifact value
             */
//        path = "/usr/local/bin/7za"
        }
    }

    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    /**
     * bak apk and mapping
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name
        def date = new Date().format("MMdd-HH-mm-ss")
        logger.quiet("-----variant--------------flavorName=" + variant.flavorName);
        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                        from variant.outputs.outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }
    project.afterEvaluate {
        //sample use for build all flavor for one time
        if (hasFlavors) {
            task(tinkerPatchAllFlavorRelease) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"

                    }

                }
            }

            task(tinkerPatchAllFlavorDebug) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
                    }

                }
            }
        }
    }
}

//add on 2016-11-13
ext {
    GROUP = "TestAndoid"
}

def myMap = [:]
myMap."an identifier with a space and double quotes" = "ALLOWED"
myMap.'with-dash-signs-and-single-quotes' = "ALLOWED"
myMap."124yang" = "123Value"
//myMap.'single quote' = "single quote 11"
//myMap."double quote" = "double quote 22"
//myMap.'''triple single quote'''  = "triple single quote 33"
//myMap."""triple double quote"""  =  "tripledouble quote 44"
//myMap./slashy string/= "slashy"
//myMap.$/dollar slashy string/$= "slashy string"
//
//myMap./slashy string6666/= "slashy"
//myMap.$/dollar slashy string6666/$= "slashy string"

//println "----------------Map-----------------"
//println "----------------Map-----------------get="+ myMap.get("an identifier with a space and double quotes")
//println "----------------Map-----------------size="+ myMap.size()
//def jkkk = "jkjkjk"
//myMap."666" = "${jkkk}"
//myMap.jjj = '''
//    我
//    换
//    行
//    了
//'''
//
//println "----------------Map-----------------size="+ myMap.size()
//def iterator = myMap.entrySet().iterator()
//while (iterator.hasNext()) {
//    def entry = iterator.next()
//    println "----遍历--map--getKey=" + entry.getKey() + "  ,getValue=" +  entry.getValue();
//}

println "----------------GString-----------------"
//def startingAndEndingWithANewline = '''
//line one
//line two
//line three
//'''
//
//def startingAndEndingWithANewline2 = """\
//"line one"
//'line two'
//line three
//"""

//def startingAndEndingWithANewline3 = 'yang \'jia\' jia'
//def startingAndEndingWithANewline4 = 'yang\\jia'
//def startingAndEndingWithANewline5 = 'yang \"jia\" jia'
//println "---GString--startingAndEndingWithANewline=" + startingAndEndingWithANewline.startsWith("\n")
//println "---GString--startingAndEndingWithANewline2=" + startingAndEndingWithANewline2
//println "---GString--startingAndEndingWithANewline3=" + startingAndEndingWithANewline3
//println "---GString--startingAndEndingWithANewline4=" + startingAndEndingWithANewline4
//println "---GString--startingAndEndingWithANewline5=" + startingAndEndingWithANewline5

//def multilineSlashy = /one
//    two
//    three/
//
//println "---GString--multilineSlashy=" + multilineSlashy.contains('\n')
//println "---GString--startingAndEndingWithANewline2=" + startingAndEndingWithANewline2.contains("\n")
//
//def sum = "The sum of 2 and 3 equals ${2 + 3}"
//def sum2 ="The sum of 1 and 2 is equal to ${def a = 1; def b = 2; a + b}"
//def sum3 ="The sum of 1 and 2 is equal to ${"研究"; "好好最后"}"
//
//println "---GString--sum=" + sum
//println "---GString--sum2=" + sum2
//println "---GString--sum3=" + sum3
//def person = [name: 'Guillaume', age: 36]
//println "---GString--age=" + person.age

//println "----------------List----------------"
//
//def numberList = [11, 33, 44]
//println "---GString--numberList=" + numberList[0]
//println "---GString--numberList=" + numberList[-1]
//numberList << 66
//numberList << 88
//println "---GString--numberList=" + numberList[-1]
//println "---GString--numberList--[0,1,2]---"
//
//numberList[0,1,2] = [1,2,3]
//println "---GString--numberList=" + numberList[0]
//println "---GString--numberList=" + numberList.size()
//
//println "----------------Arrays----------------"
//int[] aaLi = [1,2,3]
//
//
//println "----------------Closure----------------"
//
//def listener = { e -> println "Clicked on $e.source" }
//
//Closure callback = { println 'Done!' }
//Closure<Boolean> isTextFile = {
//    File it -> it.name.endsWith('.txt')
//}
//
//println "----------------Closure----------------callback=" + callback()
//
//def isOdd = { int i-> i%2 == 1 }
//println "----------------Closure----------------isOdd=" + isOdd(3)
//println "----------------Closure----------------isOdd=" + idOdd.call()

configurations {
    compile
}


println "------------configurations-----------------"

task testConfig{
    doLast{
        println configurations.compile.name
        println configurations['compile'].name
    }
}
